(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetchNews_1 = require("./fetchNews");
const newsRepo_1 = __importDefault(require("./newsRepo"));
let globalNewsRepo = new newsRepo_1.default();
function emptyElement(elm) {
    if (elm)
        while (elm.firstChild) {
            elm.removeChild(elm.firstChild);
        }
    return elm;
}
//@ts-ignore The event is tiyen specific
function keyEventHandler(event) {
    if (event.keyName === "back") {
        try {
            //@ts-ignore Tizen declaration should be added
            if (tizen)
                tizen.application.getCurrentApplication().exit();
        }
        catch (ignore) { }
    }
}
function addTextElement(objElm, textClass, textContent) {
    var newElm = document.createElement("p");
    newElm.className = textClass;
    if (textContent)
        newElm.appendChild(document.createTextNode(textContent));
    if (objElm)
        objElm.appendChild(newElm);
}
const areaNews = () => document.querySelector("#area-news");
const areaPageNum = () => document.querySelector("#area-pagenum");
function addSubject(text) { addTextElement(areaNews(), "subject", text); }
function showNews(newsRepo) {
    const objNews = areaNews(), objPagenum = areaPageNum();
    emptyElement(objNews);
    addSubject(newsRepo.arrayNews[newsRepo.indexDisplay].title);
    emptyElement(objPagenum);
    addTextElement(objPagenum, "pagenum", "Page " + (newsRepo.indexDisplay + 1) + "/" + newsRepo.arrayNews.length);
}
function showNextNews() {
    const lengthNews = globalNewsRepo.arrayNews.length;
    if (lengthNews > 0) {
        globalNewsRepo.indexDisplay = (globalNewsRepo.indexDisplay + 1) % lengthNews;
        showNews(globalNewsRepo);
    }
}
function getDataFromXML() {
    const XML_ADDRESS = "https://www.tizen.org/blogs/feed";
    globalNewsRepo.indexDisplay = 0;
    try {
        fetchNews_1.fetchNews(XML_ADDRESS, (localArrayNews) => {
            globalNewsRepo.arrayNews = localArrayNews; //Store news data in global repository
            emptyElement(areaNews());
            showNews(globalNewsRepo);
        });
    }
    catch (e) {
        if (e instanceof Error)
            addSubject(e.message);
        else
            addSubject(e);
    }
}
function setDefaultEvents() {
    //@ts-ignore This is a Tizen device specific event and should be defined
    document.addEventListener("tizenhwkey", keyEventHandler);
    const an = areaNews();
    if (an)
        an.addEventListener("click", showNextNews);
}
function init() {
    setDefaultEvents();
    getDataFromXML();
}
window.onload = init;

},{"./fetchNews":2,"./newsRepo":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function _trimText(text, maxLength) {
    let trimmedString;
    if (text && text.length > maxLength) {
        trimmedString = text.substring(0, maxLength - 3) + "...";
    }
    else {
        trimmedString = text;
    }
    return trimmedString;
}
exports.fetchNews = (url, callback) => {
    const XML_METHOD = "GET";
    const MSG_ERR_NODATA = "There is no news from tizen.org";
    const MSG_ERR_NOTCONNECTED = "Connection aborted. Check your internet connection.";
    let xmlhttp = new XMLHttpRequest();
    let xmlDoc;
    let dataItem;
    xmlhttp.open(XML_METHOD, url, false);
    xmlhttp.onreadystatechange = function _requestCompleted() {
        if (xmlhttp && xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            xmlDoc = xmlhttp.responseXML;
            if (xmlDoc)
                dataItem = xmlDoc.getElementsByTagName("item");
            if (dataItem.length > 0) {
                const NUM_MAX_NEWS = 5, NUM_MAX_LENGTH_SUBJECT = 64;
                let lengthNews = 0;
                let arrayNews = [];
                lengthNews = (dataItem.length > NUM_MAX_NEWS) ? NUM_MAX_NEWS : dataItem.length;
                for (let i = 0; i < lengthNews; i++) {
                    arrayNews.push({
                        title: dataItem[i].getElementsByTagName("title")[0].childNodes[0].nodeValue,
                        link: dataItem[i].getElementsByTagName("link")[0].childNodes[0].nodeValue,
                    });
                    arrayNews[i].title = _trimText(arrayNews[i].title, NUM_MAX_LENGTH_SUBJECT);
                }
                callback(arrayNews);
            }
            else {
                throw new Error(MSG_ERR_NODATA);
            }
            xmlhttp = null;
        }
        else {
            throw new Error(MSG_ERR_NOTCONNECTED);
        }
    };
    xmlhttp.send();
};

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class NewsRepo {
    constructor() {
        this.indexDisplay = 0;
        this.arrayNews = [];
    }
}
exports.default = NewsRepo;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
