(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetchNews_1 = require("./fetchNews");
const newsRepo_1 = __importDefault(require("./newsRepo"));
let globalNewsRepo = new newsRepo_1.default();
function emptyElement(elm) {
    if (elm)
        while (elm.firstChild) {
            elm.removeChild(elm.firstChild);
        }
    return elm;
}
//@ts-ignore The event is tiyen specific
function keyEventHandler(event) {
    if (event.keyName === "back") {
        try {
            //@ts-ignore Tizen declaration should be added
            if (tizen)
                tizen.application.getCurrentApplication().exit();
        }
        catch (ignore) { }
    }
}
function addTextElement(objElm, textClass, textContent) {
    var newElm = document.createElement("p");
    newElm.className = textClass;
    if (textContent)
        newElm.appendChild(document.createTextNode(textContent));
    if (objElm)
        objElm.appendChild(newElm);
}
const areaNews = () => document.querySelector("#area-news");
const areaPageNum = () => document.querySelector("#area-pagenum");
function addSubject(text) { addTextElement(areaNews(), "subject", text); }
function showNews(newsRepo) {
    const objNews = areaNews(), objPagenum = areaPageNum();
    emptyElement(objNews);
    addSubject(newsRepo.arrayNews[newsRepo.indexDisplay].title);
    emptyElement(objPagenum);
    addTextElement(objPagenum, "pagenum", "Page " + (newsRepo.indexDisplay + 1) + "/" + newsRepo.arrayNews.length);
}
function showNextNews() {
    const lengthNews = globalNewsRepo.arrayNews.length;
    if (lengthNews > 0) {
        globalNewsRepo.indexDisplay = (globalNewsRepo.indexDisplay + 1) % lengthNews;
        showNews(globalNewsRepo);
    }
}
function getDataFromXML() {
    const XML_ADDRESS = "https://www.tizen.org/blogs/feed";
    globalNewsRepo.indexDisplay = 0;
    try {
        fetchNews_1.fetchNews(XML_ADDRESS, (localArrayNews) => {
            globalNewsRepo.arrayNews = localArrayNews; //Store news data in global repository
            emptyElement(areaNews());
            showNews(globalNewsRepo);
        });
    }
    catch (e) {
        if (e instanceof Error)
            addSubject(e.message);
        else
            addSubject(e);
    }
}
async function getDataFromXMLAsync() {
    const XML_ADDRESS = "https://www.tizen.org/blogs/feed";
    globalNewsRepo.indexDisplay = 0;
    try {
        globalNewsRepo.arrayNews = await fetchNews_1.fetchNewsAsync(XML_ADDRESS);
        emptyElement(areaNews());
        showNews(globalNewsRepo);
    }
    catch (e) {
        if (e instanceof Error)
            addSubject(e.message);
        else
            addSubject(e);
    }
}
function setDefaultEvents() {
    //@ts-ignore This is a Tizen device specific event and should be defined
    document.addEventListener("tizenhwkey", keyEventHandler);
    const an = areaNews();
    if (an)
        an.addEventListener("click", showNextNews);
}
function init() {
    setDefaultEvents();
    //getDataFromXML()
    getDataFromXMLAsync();
}
window.onload = init;

},{"./fetchNews":2,"./newsRepo":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function _trimText(text, maxLength) {
    let trimmedString;
    if (text && text.length > maxLength) {
        trimmedString = text.substring(0, maxLength - 3) + "...";
    }
    else {
        trimmedString = text;
    }
    return trimmedString;
}
exports.fetchNews = (url, callback) => {
    const XML_METHOD = "GET";
    const MSG_ERR_NODATA = "There is no news from tizen.org";
    const MSG_ERR_NOTCONNECTED = "Connection aborted. Check your internet connection.";
    let xmlhttp = new XMLHttpRequest();
    let xmlDoc;
    let dataItem;
    xmlhttp.open(XML_METHOD, url, false);
    xmlhttp.onreadystatechange = function _requestCompleted() {
        if (xmlhttp && xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            xmlDoc = xmlhttp.responseXML;
            if (xmlDoc)
                dataItem = xmlDoc.getElementsByTagName("item");
            if (dataItem.length > 0) {
                const NUM_MAX_NEWS = 5, NUM_MAX_LENGTH_SUBJECT = 64;
                let lengthNews = 0;
                let arrayNews = [];
                lengthNews = (dataItem.length > NUM_MAX_NEWS) ? NUM_MAX_NEWS : dataItem.length;
                for (let i = 0; i < lengthNews; i++) {
                    arrayNews.push({
                        title: dataItem[i].getElementsByTagName("title")[0].childNodes[0].nodeValue,
                        link: dataItem[i].getElementsByTagName("link")[0].childNodes[0].nodeValue,
                    });
                    arrayNews[i].title = _trimText(arrayNews[i].title, NUM_MAX_LENGTH_SUBJECT);
                }
                callback(arrayNews);
            }
            else {
                throw new Error(MSG_ERR_NODATA);
            }
            xmlhttp = null;
        }
        else {
            throw new Error(MSG_ERR_NOTCONNECTED);
        }
    };
    xmlhttp.send();
};
function _getNewsFromXML(xmlDoc) {
    //let dataItem:HTMLCollectionOf<Element>;
    const dataItem = xmlDoc.getElementsByTagName("item");
    const arrayNews = [];
    if (dataItem.length > 0) {
        const NUM_MAX_NEWS = 5, NUM_MAX_LENGTH_SUBJECT = 64;
        let lengthNews = 0;
        lengthNews = (dataItem.length > NUM_MAX_NEWS) ? NUM_MAX_NEWS : dataItem.length;
        for (let i = 0; i < lengthNews; i++) {
            arrayNews.push({
                title: dataItem[i].getElementsByTagName("title")[0].childNodes[0].nodeValue,
                link: dataItem[i].getElementsByTagName("link")[0].childNodes[0].nodeValue,
            });
            arrayNews[i].title = _trimText(arrayNews[i].title, NUM_MAX_LENGTH_SUBJECT);
        }
    }
    return arrayNews;
}
exports.fetchNewsAsync = async (url) => {
    //const XML_METHOD = "GET"
    const MSG_ERR_NODATA = "There is no news from tizen.org";
    const MSG_ERR_NOTCONNECTED = "Connection aborted. Check your internet connection.";
    try {
        const response = await fetch(url);
        if (response.ok) {
            const xmlString = await response.text();
            const domParser = new window.DOMParser();
            const xmlDoc = domParser.parseFromString(xmlString, "text/xml");
            return _getNewsFromXML(xmlDoc);
        }
        else {
            throw new Error(MSG_ERR_NODATA);
        }
    }
    catch (e) {
        throw new Error(MSG_ERR_NOTCONNECTED);
    }
};

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class NewsRepo {
    constructor() {
        this.indexDisplay = 0;
        this.arrayNews = [];
    }
}
exports.default = NewsRepo;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvYXBwLnRzIiwic3JjL2pzL2ZldGNoTmV3cy50cyIsInNyYy9qcy9uZXdzUmVwby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FDQUEsMkNBQStEO0FBQy9ELDBEQUFpQztBQUVqQyxJQUFJLGNBQWMsR0FBRyxJQUFJLGtCQUFRLEVBQUUsQ0FBQTtBQUVuQyxTQUFTLFlBQVksQ0FBQyxHQUFrQjtJQUNwQyxJQUFHLEdBQUc7UUFBRSxPQUFPLEdBQUcsQ0FBQyxVQUFVLEVBQUU7WUFDM0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDbkM7SUFDRCxPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUM7QUFFRCx3Q0FBd0M7QUFDeEMsU0FBUyxlQUFlLENBQUMsS0FBUztJQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1FBQzFCLElBQUk7WUFDQSw4Q0FBOEM7WUFDOUMsSUFBRyxLQUFLO2dCQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM5RDtRQUFDLE9BQU8sTUFBTSxFQUFFLEdBQUU7S0FDdEI7QUFDTCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsTUFBcUIsRUFBRSxTQUFnQixFQUFFLFdBQXlCO0lBQ3RGLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsTUFBTSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsSUFBRyxXQUFXO1FBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDekUsSUFBRyxNQUFNO1FBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQs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RVksUUFBQSxjQUFjLEdBQUcsS0FBSyxFQUFFLEdBQVUsRUFBdUIsRUFBRTtJQUNwRSwwQkFBMEI7SUFDMUIsTUFBTSxjQUFjLEdBQUcsaUNBQWlDLENBQUE7SUFDeEQsTUFBTSxvQkFBb0IsR0FBRyxxREFBcUQsQ0FBQTtJQUVsRixJQUFJO1FBQ0EsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakMsSUFBRyxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ1osTUFBTSxTQUFTLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7WUFDeEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUMsVUFBVSxDQUFDLENBQUE7WUFDOUQsT0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDakM7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7U0FDbEM7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0tBQ3hDO0FBQ0wsQ0FBQyxDQUFBOzs7OztBQ3ZGRCxNQUFxQixRQUFRO0lBQTdCO1FBQ0ksaUJBQVksR0FBRyxDQUFDLENBQUE7UUFDaEIsY0FBUyxHQUFlLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0NBQUE7QUFIRCwyQkFHQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCB7ZmV0Y2hOZXdzLElOZXdzSXRlbSwgZmV0Y2hOZXdzQXN5bmN9IGZyb20gXCIuL2ZldGNoTmV3c1wiXG5pbXBvcnQgTmV3c1JlcG8gZnJvbSBcIi4vbmV3c1JlcG9cIlxuXG5sZXQgZ2xvYmFsTmV3c1JlcG8gPSBuZXcgTmV3c1JlcG8oKVxuXG5mdW5jdGlvbiBlbXB0eUVsZW1lbnQoZWxtOkVsZW1lbnQgfCBudWxsKSB7XG4gICAgaWYoZWxtKSB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsbVxufVxuXG4vL0B0cy1pZ25vcmUgVGhlIGV2ZW50IGlzIHRpeWVuIHNwZWNpZmljXG5mdW5jdGlvbiBrZXlFdmVudEhhbmRsZXIoZXZlbnQ6YW55KSB7XG4gICAgaWYgKGV2ZW50LmtleU5hbWUgPT09IFwiYmFja1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmUgVGl6ZW4gZGVjbGFyYXRpb24gc2hvdWxkIGJlIGFkZGVkXG4gICAgICAgICAgICBpZih0aXplbikgdGl6ZW4uYXBwbGljYXRpb24uZ2V0Q3VycmVudEFwcGxpY2F0aW9uKCkuZXhpdCgpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRUZXh0RWxlbWVudChvYmpFbG06RWxlbWVudCB8IG51bGwsIHRleHRDbGFzczpzdHJpbmcsIHRleHRDb250ZW50OnN0cmluZyB8IG51bGwpIHtcbiAgICB2YXIgbmV3RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgbmV3RWxtLmNsYXNzTmFtZSA9IHRleHRDbGFzcztcbiAgICBpZih0ZXh0Q29udGVudCkgbmV3RWxtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHRDb250ZW50KSk7XG4gICAgaWYob2JqRWxtKSBvYmpFbG0uYXBwZW5kQ2hpbGQobmV3RWxtKTtcbn1cblxuY29uc3QgYXJlYU5ld3MgPSAoKSA9PiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcmVhLW5ld3NcIilcbmNvbnN0IGFyZWFQYWdlTnVtID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcmVhLXBhZ2VudW1cIilcbmZ1bmN0aW9uIGFkZFN1YmplY3QodGV4dDpzdHJpbmcgfCBudWxsKSB7YWRkVGV4dEVsZW1lbnQoYXJlYU5ld3MoKSxcInN1YmplY3RcIix0ZXh0KX1cbmZ1bmN0aW9uIHNob3dOZXdzKG5ld3NSZXBvOk5ld3NSZXBvKTp2b2lkIHtcbiAgICBjb25zdCBvYmpOZXdzID0gYXJlYU5ld3MoKSwgb2JqUGFnZW51bSA9IGFyZWFQYWdlTnVtKClcbiAgICBlbXB0eUVsZW1lbnQob2JqTmV3cyk7XG4gICAgYWRkU3ViamVjdChuZXdzUmVwby5hcnJheU5ld3NbbmV3c1JlcG8uaW5kZXhEaXNwbGF5XS50aXRsZSk7XG4gICAgZW1wdHlFbGVtZW50KG9ialBhZ2VudW0pO1xuICAgIGFkZFRleHRFbGVtZW50KG9ialBhZ2VudW0sIFwicGFnZW51bVwiLCBcIlBhZ2UgXCIgKyAobmV3c1JlcG8uaW5kZXhEaXNwbGF5ICsgMSkgKyBcIi9cIiArIG5ld3NSZXBvLmFycmF5TmV3cy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBzaG93TmV4dE5ld3MoKSB7XG4gICAgY29uc3QgbGVuZ3RoTmV3cyA9IGdsb2JhbE5ld3NSZXBvLmFycmF5TmV3cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aE5ld3MgPiAwKSB7XG4gICAgICAgIGdsb2JhbE5ld3NSZXBvLmluZGV4RGlzcGxheSA9IChnbG9iYWxOZXdzUmVwby5pbmRleERpc3BsYXkgKyAxKSAlIGxlbmd0aE5ld3M7XG4gICAgICAgIHNob3dOZXdzKGdsb2JhbE5ld3NSZXBvKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERhdGFGcm9tWE1MKCkge1xuICAgIGNvbnN0IFhNTF9BRERSRVNTID0gXCJodHRwczovL3d3dy50aXplbi5vcmcvYmxvZ3MvZmVlZFwiXG4gICAgZ2xvYmFsTmV3c1JlcG8uaW5kZXhEaXNwbGF5ID0gMDtcbiAgICB0cnkge1xuICAgICAgICBmZXRjaE5ld3MoWE1MX0FERFJFU1MsKGxvY2FsQXJyYXlOZXdzKSA9PiB7XG4gICAgICAgICAgICBnbG9iYWxOZXdzUmVwby5hcnJheU5ld3MgPSBsb2NhbEFycmF5TmV3czsgLy9TdG9yZSBuZXdzIGRhdGEgaW4gZ2xvYmFsIHJlcG9zaXRvcnlcbiAgICAgICAgICAgIGVtcHR5RWxlbWVudChhcmVhTmV3cygpKTtcbiAgICAgICAgICAgIHNob3dOZXdzKGdsb2JhbE5ld3NSZXBvKTtcbiAgICAgICAgfSlcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgaWYoZSBpbnN0YW5jZW9mIEVycm9yKSBhZGRTdWJqZWN0KGUubWVzc2FnZSlcbiAgICAgICAgZWxzZSBhZGRTdWJqZWN0KGUpXG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXREYXRhRnJvbVhNTEFzeW5jKCkge1xuICAgIGNvbnN0IFhNTF9BRERSRVNTID0gXCJodHRwczovL3d3dy50aXplbi5vcmcvYmxvZ3MvZmVlZFwiXG4gICAgZ2xvYmFsTmV3c1JlcG8uaW5kZXhEaXNwbGF5ID0gMFxuICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbE5ld3NSZXBvLmFycmF5TmV3cyA9IGF3YWl0IGZldGNoTmV3c0FzeW5jKFhNTF9BRERSRVNTKVxuICAgICAgICBlbXB0eUVsZW1lbnQoYXJlYU5ld3MoKSlcbiAgICAgICAgc2hvd05ld3MoZ2xvYmFsTmV3c1JlcG8pXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGlmKGUgaW5zdGFuY2VvZiBFcnJvcikgYWRkU3ViamVjdChlLm1lc3NhZ2UpXG4gICAgICAgIGVsc2UgYWRkU3ViamVjdChlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0RGVmYXVsdEV2ZW50cygpOnZvaWQge1xuICAgIC8vQHRzLWlnbm9yZSBUaGlzIGlzIGEgVGl6ZW4gZGV2aWNlIHNwZWNpZmljIGV2ZW50IGFuZCBzaG91bGQgYmUgZGVmaW5lZFxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0aXplbmh3a2V5XCIsIGtleUV2ZW50SGFuZGxlcilcbiAgICBjb25zdCBhbiA9IGFyZWFOZXdzKClcbiAgICBpZihhbikgYW4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dOZXh0TmV3cylcbn1cblxuZnVuY3Rpb24gaW5pdCgpOnZvaWQge1xuICAgIHNldERlZmF1bHRFdmVudHMoKVxuICAgIC8vZ2V0RGF0YUZyb21YTUwoKVxuICAgIGdldERhdGFGcm9tWE1MQXN5bmMoKVxufVxuXG53aW5kb3cub25sb2FkID0gaW5pdFxuIiwiZnVuY3Rpb24gX3RyaW1UZXh0KHRleHQ6c3RyaW5nIHwgbnVsbCwgbWF4TGVuZ3RoOm51bWJlcikge1xuICAgIGxldCB0cmltbWVkU3RyaW5nO1xuICAgIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICAgIHRyaW1tZWRTdHJpbmcgPSB0ZXh0LnN1YnN0cmluZygwLCBtYXhMZW5ndGggLSAzKSArIFwiLi4uXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJpbW1lZFN0cmluZyA9IHRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cmltbWVkU3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOZXdzSXRlbSB7XG4gICAgdGl0bGU6IHN0cmluZyB8IG51bGwsXG4gICAgbGluazogc3RyaW5nIHwgbnVsbCxcbn1cbnR5cGUgVE5ld3NJdGVtQ2FsbGJhY2tGdW5jdGlvbiA9IChuZXdzQXJyYXk6SU5ld3NJdGVtW10pID0+IHZvaWRcbmV4cG9ydCBjb25zdCBmZXRjaE5ld3MgPSAodXJsOnN0cmluZywgY2FsbGJhY2s6VE5ld3NJdGVtQ2FsbGJhY2tGdW5jdGlvbik6dm9pZCA9PiB7XG4gICAgY29uc3QgWE1MX01FVEhPRCA9IFwiR0VUXCJcbiAgICBjb25zdCBNU0dfRVJSX05PREFUQSA9IFwiVGhlcmUgaXMgbm8gbmV3cyBmcm9tIHRpemVuLm9yZ1wiXG4gICAgY29uc3QgTVNHX0VSUl9OT1RDT05ORUNURUQgPSBcIkNvbm5lY3Rpb24gYWJvcnRlZC4gQ2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uLlwiXG4gICAgbGV0IHhtbGh0dHA6WE1MSHR0cFJlcXVlc3QgfCBudWxsID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgbGV0IHhtbERvYztcbiAgICBsZXQgZGF0YUl0ZW06SFRNTENvbGxlY3Rpb25PZjxFbGVtZW50PjtcblxuICAgIHhtbGh0dHAub3BlbihYTUxfTUVUSE9ELCB1cmwsIGZhbHNlKTtcbiAgICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIF9yZXF1ZXN0Q29tcGxldGVkKCk6dm9pZCB7XG4gICAgICAgIGlmICh4bWxodHRwICYmIHhtbGh0dHAucmVhZHlTdGF0ZSA9PT0gNCAmJiB4bWxodHRwLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICB4bWxEb2MgPSB4bWxodHRwLnJlc3BvbnNlWE1MO1xuICAgICAgICAgICAgaWYoeG1sRG9jKSBkYXRhSXRlbSA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcIml0ZW1cIik7XG4gICAgICAgICAgICBpZiAoZGF0YUl0ZW0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IE5VTV9NQVhfTkVXUyA9IDUsIE5VTV9NQVhfTEVOR1RIX1NVQkpFQ1QgPSA2NFxuICAgICAgICAgICAgICAgIGxldCBsZW5ndGhOZXdzID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXlOZXdzOklOZXdzSXRlbVtdID0gW107XG4gICAgICAgICAgICAgICAgbGVuZ3RoTmV3cyA9IChkYXRhSXRlbS5sZW5ndGggPiBOVU1fTUFYX05FV1MpID8gTlVNX01BWF9ORVdTIDogZGF0YUl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoTmV3czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5TmV3cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkYXRhSXRlbVtpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluazogZGF0YUl0ZW1baV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlOZXdzW2ldLnRpdGxlID0gX3RyaW1UZXh0KGFycmF5TmV3c1tpXS50aXRsZSwgTlVNX01BWF9MRU5HVEhfU1VCSkVDVClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYXJyYXlOZXdzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVNHX0VSUl9OT0RBVEEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxodHRwID0gbnVsbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1TR19FUlJfTk9UQ09OTkVDVEVEKVxuICAgICAgICB9XG4gICAgfTtcbiAgICB4bWxodHRwLnNlbmQoKVxufVxuXG5mdW5jdGlvbiBfZ2V0TmV3c0Zyb21YTUwoeG1sRG9jOkRvY3VtZW50KTpJTmV3c0l0ZW1bXSB7XG4gICAgLy9sZXQgZGF0YUl0ZW06SFRNTENvbGxlY3Rpb25PZjxFbGVtZW50PjtcbiAgICBjb25zdCBkYXRhSXRlbSA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcIml0ZW1cIik7XG4gICAgY29uc3QgYXJyYXlOZXdzOklOZXdzSXRlbVtdID0gW107XG4gICAgaWYgKGRhdGFJdGVtLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgTlVNX01BWF9ORVdTID0gNSwgTlVNX01BWF9MRU5HVEhfU1VCSkVDVCA9IDY0XG4gICAgICAgIGxldCBsZW5ndGhOZXdzID0gMDtcbiAgICAgICAgbGVuZ3RoTmV3cyA9IChkYXRhSXRlbS5sZW5ndGggPiBOVU1fTUFYX05FV1MpID8gTlVNX01BWF9ORVdTIDogZGF0YUl0ZW0ubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aE5ld3M7IGkrKykge1xuICAgICAgICAgICAgYXJyYXlOZXdzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBkYXRhSXRlbVtpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdLmNoaWxkTm9kZXNbMF0ubm9kZVZhbHVlLFxuICAgICAgICAgICAgICAgIGxpbms6IGRhdGFJdGVtW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKVswXS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXJyYXlOZXdzW2ldLnRpdGxlID0gX3RyaW1UZXh0KGFycmF5TmV3c1tpXS50aXRsZSwgTlVNX01BWF9MRU5HVEhfU1VCSkVDVClcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlOZXdzO1xufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hOZXdzQXN5bmMgPSBhc3luYyAodXJsOnN0cmluZyk6UHJvbWlzZTxJTmV3c0l0ZW1bXT4gPT4ge1xuICAgIC8vY29uc3QgWE1MX01FVEhPRCA9IFwiR0VUXCJcbiAgICBjb25zdCBNU0dfRVJSX05PREFUQSA9IFwiVGhlcmUgaXMgbm8gbmV3cyBmcm9tIHRpemVuLm9yZ1wiXG4gICAgY29uc3QgTVNHX0VSUl9OT1RDT05ORUNURUQgPSBcIkNvbm5lY3Rpb24gYWJvcnRlZC4gQ2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uLlwiXG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybClcbiAgICAgICAgaWYocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnN0IHhtbFN0cmluZyA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKVxuICAgICAgICAgICAgY29uc3QgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKVxuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHJpbmcsXCJ0ZXh0L3htbFwiKVxuICAgICAgICAgICAgcmV0dXJuIF9nZXROZXdzRnJvbVhNTCh4bWxEb2MpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVNHX0VSUl9OT0RBVEEpXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihNU0dfRVJSX05PVENPTk5FQ1RFRClcbiAgICB9XG59XG4iLCJpbXBvcnQge0lOZXdzSXRlbX0gZnJvbSBcIi4vZmV0Y2hOZXdzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV3c1JlcG8ge1xuICAgIGluZGV4RGlzcGxheSA9IDBcbiAgICBhcnJheU5ld3M6SU5ld3NJdGVtW10gPSBbXVxufVxuIl19
